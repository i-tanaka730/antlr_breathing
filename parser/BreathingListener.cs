//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Git\antlr_breathing\Breathing.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="BreathingParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public interface IBreathingListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="BreathingParser.breathing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBreathing([NotNull] BreathingParser.BreathingContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="BreathingParser.breathing"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBreathing([NotNull] BreathingParser.BreathingContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="BreathingParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] BreathingParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="BreathingParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] BreathingParser.TypeContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="BreathingParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterName([NotNull] BreathingParser.NameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="BreathingParser.name"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitName([NotNull] BreathingParser.NameContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="BreathingParser.num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNum([NotNull] BreathingParser.NumContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="BreathingParser.num"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNum([NotNull] BreathingParser.NumContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="BreathingParser.option"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOption([NotNull] BreathingParser.OptionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="BreathingParser.option"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOption([NotNull] BreathingParser.OptionContext context);
}
