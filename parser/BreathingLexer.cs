//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Git\antlr_breathing\Breathing.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class BreathingLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, TYPE=5, NUMBER=6, ANY=7;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "TYPE", "NUMBER", "ANY"
	};


	public BreathingLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BreathingLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'\u306E\u547C\u5438'", "'\u306E\u578B'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "TYPE", "NUMBER", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Breathing.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BreathingLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\t', '%', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x6', '\a', ' ', 
		'\n', '\a', '\r', '\a', '\xE', '\a', '!', '\x3', '\b', '\x3', '\b', '\x2', 
		'\x2', '\t', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', 
		'\a', '\r', '\b', '\xF', '\t', '\x3', '\x2', '\x4', '\xF', '\x2', '\x5CAB', 
		'\x5CAB', '\x604D', '\x604D', '\x65E7', '\x65E7', '\x670A', '\x670A', 
		'\x6C36', '\x6C36', '\x7090', '\x7090', '\x7365', '\x7365', '\x82B3', 
		'\x82B3', '\x86C9', '\x86C9', '\x87F4', '\x87F4', '\x96F9', '\x96F9', 
		'\x97F5', '\x97F5', '\x98AA', '\x98AA', '\f', '\x2', '\x4E05', '\x4E05', 
		'\x4E5F', '\x4E5F', '\x4E96', '\x4E96', '\x516D', '\x516D', '\x516F', 
		'\x516F', '\x53C4', '\x53C4', '\x56DD', '\x56DD', '\x58F3', '\x58F3', 
		'\x5F12', '\x5F12', '\x6300', '\x6300', '\x2', '%', '\x2', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', '\x3', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x5', '\x15', '\x3', '\x2', '\x2', '\x2', '\a', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\t', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\x1C', '\x3', '\x2', '\x2', '\x2', '\r', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '#', '\x3', '\x2', '\x2', '\x2', '\x11', '\x12', 
		'\a', '\x3070', '\x2', '\x2', '\x12', '\x13', '\a', '\x547E', '\x2', '\x2', 
		'\x13', '\x14', '\a', '\x543A', '\x2', '\x2', '\x14', '\x4', '\x3', '\x2', 
		'\x2', '\x2', '\x15', '\x16', '\a', '\x3070', '\x2', '\x2', '\x16', '\x17', 
		'\a', '\x578D', '\x2', '\x2', '\x17', '\x6', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x19', '\a', '*', '\x2', '\x2', '\x19', '\b', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\x1B', '\a', '+', '\x2', '\x2', '\x1B', '\n', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x1D', '\t', '\x2', '\x2', '\x2', '\x1D', '\f', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', ' ', '\t', '\x3', '\x2', '\x2', '\x1F', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', ' ', '!', '\x3', '\x2', '\x2', '\x2', 
		'!', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xE', '\x3', '\x2', '\x2', '\x2', '#', '$', '\v', '\x2', 
		'\x2', '\x2', '$', '\x10', '\x3', '\x2', '\x2', '\x2', '\x4', '\x2', '!', 
		'\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
