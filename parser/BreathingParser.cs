//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Git\antlr_breathing\Breathing.g4 by ANTLR 4.9

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9")]
[System.CLSCompliant(false)]
public partial class BreathingParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, TYPE=5, NUMBER=6, ANY=7;
	public const int
		RULE_breathing = 0, RULE_type = 1, RULE_name = 2, RULE_num = 3, RULE_option = 4;
	public static readonly string[] ruleNames = {
		"breathing", "type", "name", "num", "option"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u306E\u547C\u5438'", "'\u306E\u578B'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "TYPE", "NUMBER", "ANY"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Breathing.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static BreathingParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BreathingParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BreathingParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class BreathingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option() {
			return GetRuleContext<OptionContext>(0);
		}
		public BreathingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breathing; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreathingListener typedListener = listener as IBreathingListener;
			if (typedListener != null) typedListener.EnterBreathing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreathingListener typedListener = listener as IBreathingListener;
			if (typedListener != null) typedListener.ExitBreathing(this);
		}
	}

	[RuleVersion(0)]
	public BreathingContext breathing() {
		BreathingContext _localctx = new BreathingContext(Context, State);
		EnterRule(_localctx, 0, RULE_breathing);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 10; type();
			State = 11; Match(T__0);
			State = 12; num();
			State = 13; Match(T__1);
			State = 14; name();
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 15; Match(T__2);
				State = 16; option();
				State = 17; Match(T__3);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(BreathingParser.TYPE, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreathingListener typedListener = listener as IBreathingListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreathingListener typedListener = listener as IBreathingListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; Match(TYPE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY() { return GetTokens(BreathingParser.ANY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY(int i) {
			return GetToken(BreathingParser.ANY, i);
		}
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreathingListener typedListener = listener as IBreathingListener;
			if (typedListener != null) typedListener.EnterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreathingListener typedListener = listener as IBreathingListener;
			if (typedListener != null) typedListener.ExitName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		NameContext _localctx = new NameContext(Context, State);
		EnterRule(_localctx, 4, RULE_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 23; Match(ANY);
				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ANY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(BreathingParser.NUMBER, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreathingListener typedListener = listener as IBreathingListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreathingListener typedListener = listener as IBreathingListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 6, RULE_num);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER() { return GetTokens(BreathingParser.NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER(int i) {
			return GetToken(BreathingParser.NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ANY() { return GetTokens(BreathingParser.ANY); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY(int i) {
			return GetToken(BreathingParser.ANY, i);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IBreathingListener typedListener = listener as IBreathingListener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IBreathingListener typedListener = listener as IBreathingListener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 8, RULE_option);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 30;
				_la = TokenStream.LA(1);
				if ( !(_la==NUMBER || _la==ANY) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NUMBER || _la==ANY );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\t', '&', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', '\t', 
		'\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', '\x6', 
		'\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', 
		'\x2', '\x16', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', 
		'\x6', '\x4', '\x1B', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '\x1C', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x6', '\x6', '\"', '\n', '\x6', 
		'\r', '\x6', '\xE', '\x6', '#', '\x3', '\x6', '\x2', '\x2', '\a', '\x2', 
		'\x4', '\x6', '\b', '\n', '\x2', '\x3', '\x3', '\x2', '\b', '\t', '\x2', 
		'#', '\x2', '\f', '\x3', '\x2', '\x2', '\x2', '\x4', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\x1A', '\x3', '\x2', '\x2', '\x2', '\b', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '\n', '!', '\x3', '\x2', '\x2', '\x2', '\f', 
		'\r', '\x5', '\x4', '\x3', '\x2', '\r', '\xE', '\a', '\x3', '\x2', '\x2', 
		'\xE', '\xF', '\x5', '\b', '\x5', '\x2', '\xF', '\x10', '\a', '\x4', '\x2', 
		'\x2', '\x10', '\x15', '\x5', '\x6', '\x4', '\x2', '\x11', '\x12', '\a', 
		'\x5', '\x2', '\x2', '\x12', '\x13', '\x5', '\n', '\x6', '\x2', '\x13', 
		'\x14', '\a', '\x6', '\x2', '\x2', '\x14', '\x16', '\x3', '\x2', '\x2', 
		'\x2', '\x15', '\x11', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x3', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'\x18', '\a', '\a', '\x2', '\x2', '\x18', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1B', '\a', '\t', '\x2', '\x2', '\x1A', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\a', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\a', 
		'\b', '\x2', '\x2', '\x1F', '\t', '\x3', '\x2', '\x2', '\x2', ' ', '\"', 
		'\t', '\x2', '\x2', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\x3', '\x2', '\x2', '\x2', '#', '!', '\x3', '\x2', '\x2', '\x2', 
		'#', '$', '\x3', '\x2', '\x2', '\x2', '$', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x5', '\x15', '\x1C', '#',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
